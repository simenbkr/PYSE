BEGIN
    EXTERNAL CLASS demos = "/home/simen/simula/demos/demos.atr";
        demos BEGIN

    REAL Tw, Tn, Tc, Ts, p_r;
    INTEGER num_BS, lambda, sim_n, num_s, num_meters, i;
    REF(Bin) finished_packets;
    REF(RDist) MNO_delay, process_c, process_s;
    REF(BDist) BS_failure, load_bal;
    REF(IDist) tbp;
    REF(Tally) emp_delay;
    REF(WaitQ) serverq, controllerq;
    REF(Count) over;

    ENTITY CLASS PacketGen;
    BEGIN
        LOOP:
            hold(tbp.sample);
            NEW Packet("p").schedule(now); 
        REPEAT;
    END;

    ENTITY CLASS Packet;
    BEGIN
        LONG REAL ts;

        ts := time;
        
        if BS_failure.sample then BEGIN
            finished_packets.give(1);
        END
        ELSE BEGIN
            hold(Tw);
            hold(MNO_delay.sample);
           
            controllerq.wait; 
            serverq.wait;
            
            finished_packets.give(1);
            emp_delay.update(time - ts);
            
            if (time - ts) > 0.200 then over.update(1);

        END;
    END;

    ENTITY CLASS Controller(waitq_);
    REF(WaitQ) waitq_;
    BEGIN
        REF(Packet) pakka;

        LOOP:
            pakka :- waitq_.coopt;
            hold(process_c.sample);
            pakka.schedule(now);        
        REPEAT;
    END;

    ENTITY CLASS Server(waitq_);
    REF(WaitQ) waitq_;
    BEGIN
        
        REF(Packet) pakka;

        LOOP:
            pakka :- waitq_.coopt;
            hold(process_s.sample);
            pakka.schedule(now);
        REPEAT;   
    END;


    ! Variable numbers;
    Tw := 110 / 1000;
    Tn := 20 / 1000;
    Tc := 0.1 / 1000;
    Ts := 2 / 1000;
    p_r := 0.95;
    num_BS := 50;
    num_s := 2;
    lambda := 1;
    sim_n := 100000;
    num_meters := 10;

    ! Distributions;
   
    ! 1 pakke per meter per sekund => lambda = 1;
    tbp :- NEW Poisson("Packet", 1);
    MNO_delay :- NEW NegExp("MNO delay", 1/Tn);
    process_c :- NEW NegExp("Process C", 1/Tc);
    process_s :- NEW NegExp("Process S", 1/Ts);
    BS_failure :- NEW Draw("BS failure", 1 - p_r);
    load_bal :- NEW Draw("Load balancing", 1/num_s);

    ! Variable classes;
    
    emp_delay :- NEW Tally("delay");
    
    finished_packets :- NEW Bin("finished", 0);
    serverq :- NEW WaitQ("Server queue"); 
    controllerq :- NEW WaitQ("ControllerQ");

    over :- NEW Count("over 200ms");

    ! Instantiate classes my dudes;
    
    NEW Controller("C", controllerq).schedule(0.0);

    for i:=1 step 1 until num_s do
        NEW Server(edit("Server",i), serverq).schedule(0.0);
    
    for i:=1 step 1 until num_meters do
        NEW PacketGen(edit("Meter",i)).schedule(0.0);
    
    
    finished_packets.take(sim_n);

    END;
END;
