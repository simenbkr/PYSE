BEGIN
    EXTERNAL CLASS demos = "/home/simen/simula/demos/demos.atr";
    demos BEGIN
    
    REAL Tw, Tn, Tc, Ts, p_r, intensity;
    INTEGER num_BS, sim_n, num_s, num_meters, i, j, meters_per_bs;
    REF(Bin) finished_packets;
    REF(RDist) MNO_delay, process_c, process_s;
    REF(BDist) BS_failure;
    REF(IDist) tbp;
    REF(Tally) emp_delay;
    REF(WaitQ) serverq, controllerq;
    REF(Count) over, packets_recv;


    ! Med Poisson kan man slå sammen flere Poisson-prosesser til én. Dette er poenget med BS;
    ! Denne er derfor depricata, my dudes;
    ENTITY CLASS PacketGen;
    BEGIN
        INTEGER i, num_packets;
        
        LOOP:
            num_packets := tbp.sample;
            for i:=0 step 1 until num_packets do
                NEW Packet(edit("pakke",i)).schedule(now);
            
            hold(1);
            ! Wait 1s;
        REPEAT;
    END;


    ENTITY CLASS BS;
    BEGIN
        REF(IDist) num_packets;
        INTEGER num, i;
        
        LOOP:
            num := tbp.sample;

            for i:=0 step 1 until num do
                NEW Packet(edit("pakke",i)).schedule(now);
            
            hold(1);
        REPEAT;  
    END;

    ENTITY CLASS Packet;
    BEGIN
        LONG REAL ts;

        ts := time;
       
        if BS_failure.sample then BEGIN
            !finished_packets.give(1);
        END
        ELSE BEGIN
            hold(Tw);
            hold(MNO_delay.sample);
           
            controllerq.wait; 
            serverq.wait;
            
            emp_delay.update(time - ts);
            
            if (time - ts) > 0.200 then over.update(1);
            finished_packets.give(1);
            packets_recv.update(1);
        END;
    END;

    ENTITY CLASS Controller(waitq_);
    REF(WaitQ) waitq_;
    BEGIN
        REF(Packet) pakka;

        LOOP:
            pakka :- waitq_.coopt;
            hold(process_c.sample);
            pakka.schedule(now);        
        REPEAT;
    END;

    ENTITY CLASS Server(waitq_);
    REF(WaitQ) waitq_;
    BEGIN
        
        REF(Packet) pakka;

        LOOP:
            pakka :- waitq_.coopt;
            hold(process_s.sample);
            pakka.schedule(now);
        REPEAT;   
    END;


    ! Variable numbers;
    Tw := 110 / 1000;
    Tn := 20 / 1000;
    Tc := 0.1 / 1000;
    Ts := 2 / 1000;
    p_r := 0.95;
    num_BS := 50;
    num_s := 2;
    sim_n := 100000;
    num_meters := 1000;
    
    meters_per_bs := num_meters / num_BS;

    ! Anta to oppdateringer i timen, hver på ca
      100 kB. Anta pakkesize for data på ca 1000B
      => pakker/sekund blir 2*10^5 / 10^3 = 0.0555555
      ~ 0.06
    ;
    intensity := 0.06;

    ! Distributions;
   
    ! ers;
    tbp :- NEW Poisson("Poisson packet", meters_per_bs * intensity);
    MNO_delay :- NEW NegExp("MNO delay", 1/Tn);
    process_c :- NEW NegExp("Process C", 1/Tc);
    process_s :- NEW NegExp("Process S", 1/Ts);
    BS_failure :- NEW Draw("BS failure", 1 - p_r);
    ! Variable classes;
    
    emp_delay :- NEW Tally("delay");
    
    finished_packets :- NEW Bin("finished", 0);
    serverq :- NEW WaitQ("Server queue"); 
    controllerq :- NEW WaitQ("ControllerQ");

    ! Counts ;
    
    over :- NEW Count("over 200ms");
    packets_recv :- NEW Count("Received");

    ! Instantiate classes my dudes;
!    trace;
    NEW Controller("C", controllerq).schedule(0.0);

    for i:=1 step 1 until num_s do
        NEW Server(edit("Server",i), serverq).schedule(0.0);
    
    

    for i:=1 step 1 until num_BS do
        NEW BS(edit("BS",i)).schedule(0.0);

    !for j:=1 step 1 until num_meters do
    !    NEW PacketGen(edit("Meter",j)).schedule(0.0);
    
    
    finished_packets.take(sim_n);

    END;
END;
