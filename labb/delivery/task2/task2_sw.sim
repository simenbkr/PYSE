BEGIN
    EXTERNAL CLASS DEMOS = "/home/simen/simula/demos/demos.atr";
    DEMOS BEGIN
       
        REAL tot_downtime, server_fail_intensity, controller_fail_intensity, restart_s_mean, restart_c_mean, pass_to_act_mean, sim_time;
        INTEGER num_server;
        REF(RDIST) server_fail_wait, controller_fail_wait, restart_s, restart_c, pass_to_act;
        REF(RES) available_servers, active_;
        BOOLEAN controller_up;
        REF(CONDQ) hub_failure;
        REF(TALLY) downtime_;

        ENTITY CLASS SERVER(init_);
        BOOLEAN init_;
        BEGIN
            INTEGER available;
            
            if not init_ THEN goto passive;
            active_.acquire(1);

            active:
                    available := available_servers.avail;
                    
                    if available > 0 THEN
                    BEGIN
                        HOLD(server_fail_wait.sample);
                        available_servers.acquire(1);
                        hub_failure.signal;
                        
                        active_.release(1);
                        
                        HOLD(restart_s.sample);

                        if (controller_up) THEN
                        BEGIN
                            available_servers.release(1);
                            hub_failure.signal;
                        END;
                    END
                    ELSE
                    BEGIN
                         
                        HOLD(server_fail_wait.sample);
                        active_.release(1); 
                        
                        HOLD(restart_s.sample);
                    END;

            passive:
                active_.acquire(1);
                HOLD(pass_to_act.sample);
                goto active;
        END;

        ENTITY CLASS CONTROLLER;
        BEGIN
            INTEGER available;

            LOOP:
                
                HOLD(controller_fail_wait.sample);
                controller_up := false;

                available := available_servers.avail;
                
                if available > 0 THEN 
                BEGIN
                    available_servers.acquire(available);
                END;
                hub_failure.signal;

                HOLD(restart_c.sample);
                
                if active_.avail < 2 THEN available_servers.release(2 - active_.avail);
                
                controller_up := true;
                hub_failure.signal;
            REPEAT;
        END;

        ! ELHUB-class. Keeps track of downtime using a conditional queue;
        ENTITY CLASS HUB;
        BEGIN
            INTEGER available;
            LONG REAL downtime;
            
            ! The Hub is down when 0 servers are available, or the controller is down;
            LOOP:
                hub_failure.waituntil(available_servers.avail < 1 or not controller_up);
                downtime := time;
                hub_failure.waituntil(available_servers.avail > 0 and controller_up);
                downtime := time - downtime;
                tot_downtime := tot_downtime + downtime;
                downtime_.update(downtime);
            REPEAT;
        END;
  
        ! System variables;
        server_fail_intensity := 0.1;
        controller_fail_intensity := 0.01;
        restart_s_mean := 1;
        restart_c_mean := 2;
        pass_to_act_mean := 0.3;
        controller_up := true;
        num_server := 3;
        tot_downtime := 0;

        ! DEMOS-objects and distributions;        
        downtime_ :- NEW TALLY("Downtime");
        hub_failure :- NEW CONDQ("Hub failure");
        available_servers :- NEW RES("AvailServers", num_server);
        active_ :- NEW RES("Active", 2);


        server_fail_wait :- NEW NegExp("serverfail wait", server_fail_intensity);
        controller_fail_wait :- NEW NegExp("controllerfail wait", controller_fail_intensity);
        restart_s :- NEW NegExp("restart s", restart_s_mean);
        restart_c :- NEW NegExp("restart c", restart_c_mean);
        pass_to_act :- NEW NegExp("passtoact", pass_to_act_mean);
        
        ! Initialise objects;
        NEW HUB("Hub").schedule(0.0);
        NEW CONTROLLER("C1").schedule(0.0);
        NEW SERVER("S1", true).schedule(0.0);
        NEW SERVER("S2", true).schedule(0.0);
        NEW SERVER("S3", false).schedule(0.0);
        
        ! Arbitrarily chosen number for keeping simulation going;
        sim_time := 1000000;
        HOLD(sim_time);
        
        ! Output recorded downtime;

        outText("Total downtime:");
        outimage;
        outFix(tot_downtime, 10, 20);
        outimage;
        outText("As a percentage:");
        tot_downtime := tot_downtime / sim_time * 100;
        outFix(tot_downtime, 5, 7);
        outText("%");
        outimage;

    END;
END;
